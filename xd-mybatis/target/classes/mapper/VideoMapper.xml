<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace: 保持全局唯一，最好和DAO层的Java接口一致，这样就可以映射对应的SQL语句到对应的方法名称、参数和返回类型-->
<!--在DAO包的对应类(例如VideoMapper)，右键->Copy Reference获得引用-->
<!--Mybatis使用i接口动态代理与DAO交互，所以namespace必须为DAO层的全路径-->
<mapper namespace="net.xdclass.online_class.dao.VideoMapper">

    <sql id="base_video_field">
        id,title,summary,cover_img
    </sql>

    <!-- id在当前mapper下应保持惟一， 方法名应与接口一致，在只有一个参数时，通过自动映射，可以省略参数指定  -->
    <!--  resultType为SQL查询结果集的封装  -->
    <!--  如果用@param取了别名，则#{video_id}应与别名保持一致，否则与形参名保持一致  -->
    <select id="selectById" resultType="net.xdclass.online_class.domain.Video">
        SELECT <include refid="base_video_field"/> FROM video WHERE id = #{video_id, jdbcType=INTEGER}
    </select>

    <select id="selectByScoreAndTitle" resultType="Video">
        SELECT * FROM video WHERE score = #{score, jdbcType=DOUBLE} AND title LIKE CONCAT("%", #{title} ,"%")
    </select>

    <!--  将数据库的自增主键(keyColumn="id")映射到实体类的自增主键(keyProperty="id")  -->
    <insert id="addVideo" parameterType="net.xdclass.online_class.domain.Video"
    useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO `video` ( `title`, `summary`, `cover_img`, `price`, `creation_time`, `score`)
        VALUES
        (#{title,jdbcType=VARCHAR},#{summary,jdbcType=VARCHAR},#{coverImg,jdbcType=VARCHAR},
        #{price,jdbcType=INTEGER},#{creationTime,jdbcType=TIMESTAMP},#{score,jdbcType=DOUBLE});
    </insert>

    <!--foreach 入参是List类型的时候，collection 属性值为list,
        入参是Map类型的时候，collection 属性值为map的key值  -->
    <insert id="addVideoInBulk" parameterType="net.xdclass.online_class.domain.Video">
    INSERT INTO `video` ( `title`, `summary`, `cover_img`, `price`, `creation_time`, `score`)
    VALUES
    <foreach collection="list" item="video" separator=",">
        (#{video.title,jdbcType=VARCHAR},#{video.summary,jdbcType=VARCHAR},#{video.coverImg,jdbcType=VARCHAR},
        #{video.price,jdbcType=INTEGER},
        #{video.creationTime,jdbcType=TIMESTAMP},#{video.score,jdbcType=DOUBLE})
    </foreach>
    </insert>

    <update id="updateVideoSelective" parameterType="net.xdclass.online_class.domain.Video">
        update video
        <trim prefix="set" suffixOverrides=",">

            <if test="title != null "> title = #{title,jdbcType=VARCHAR},</if>

            <if test="summary != null "> summary = #{summary,jdbcType=VARCHAR},</if>

            <if test="coverImg != null "> cover_img = #{coverImg,jdbcType=VARCHAR},</if>

            <if test="price != 0 "> price = #{price,jdbcType=INTEGER},</if>

            <if test="creationTime !=null "> creation_time = #{creationTime,jdbcType=TIMESTAMP},</if>

            <!-- 特别注意： 一定要看pojo类里面的是基本数据类型，还是包装数据类型-->
            <if test="score != null "> score = #{score,jdbcType=DOUBLE},</if>

        </trim>
        where
        id = #{id}
    </update>
    
    <resultMap id="VideoResultMap" type="Video">

        <!--    id指定查询列的唯一标识    -->
        <!--    将数据表中的id(查询结果的主键)映射到类属性中的id    -->
        <id column="id" property="id" jdbcType="INTEGER" />

        <!--    将某一列映射到POJO对象的某一属性    -->
        <result column="video_title" property="title" jdbcType="VARCHAR" />
        <result column="summary" property="summary" jdbcType="VARCHAR" />
        <result column="cover_img" property="coverImg" jdbcType="VARCHAR" />


    </resultMap>
    <!--  通过设置resultMap, 将查询结果映射到上述的各个result的column中  -->
    <select id="selectBasicFieldByIdWithResultMap" resultMap="VideoResultMap">
        SELECT id, title as video_title, summary, cover_img FROM video WHERE id = #{video_id}
    </select>

</mapper>